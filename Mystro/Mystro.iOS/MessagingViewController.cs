// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using BubbleCell;
using iOSsample;
using MonoTouch.Dialog;
using System.Linq;

namespace Mystro.iOS
{
	public partial class MessagingViewController : ChatViewController
	{
		QSMessagingService service;
		QSUserService userService;

		public MessagingViewController(RootElement r, QSMessagingService svc, 		QSUserService userService
			) : base(r) {
			this.userService = userService;
			service = svc;
		}

		async void SendMessage (object sender, EventArgs args)
		{


			side = false;


			if (!string.IsNullOrEmpty (entry.Text)) {
				discussion.Root [0].Add (new ChatBubble (side, entry.Text));
				service.InsertTodoItemAsync (new Message {
					DT = DateTime.Now,
					From = AppDelegate.LoggedUser.Username,
					To = Title,
					Msg = entry.Text
				});
				ScrollToBottom (true);
			}
			entry.Text = "";



			await service.RefreshDataAsync ();

			foreach (User u in userService.UserItems){


		
				if (service != null && service.Items != null) {

					Message msg = service.Items.Where (m => m.From == u.Username || m.To == u.Username).OrderByDescending (m => m.DT).FirstOrDefault ();
					string s = "No messages";
					if (msg != null)
					if (msg.From == AppDelegate.LoggedUser.Username)
						s = "You: " + msg.Msg;
					else
						s = msg.Msg;

				
					root = new RootElement (u.Username){ new Section () };

					var l = service.Items.Where (m => m.From == u.Username || m.To == u.Username).OrderBy (m => m.DT).ToList ();
					foreach (Message m in l) {

						if (m.From == AppDelegate.LoggedUser.Username) {
							root[0].Add (new ChatBubble (false, m.Msg));
						} else {
							root[0].Add (new ChatBubble (true, m.Msg));
						}
					}

				}
			
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			sendButton.AddTarget (SendMessage, UIControlEvent.TouchUpInside);

		}
			

	}
}
